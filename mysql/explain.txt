explain 优化查询计划
explain+ sql语句
作用： 表的读取顺序，数据读取操作类型，哪些索引可以使用，哪些索引实际使用，表之间的引用，每张表多少行被优化器查询
**#id 
id相同 顺序从上到下
id不同 id会递增 id值越大执行优先
id相同id不同同时存在 id会递增 id值越大执行优先 id相同的从上到下顺序执行
***# select_type  区别查询的类型。联合查询。子查询等复杂查询
simple 简单查询 查询不包含子查询或union
primary 查询中若包含任何复杂子部分，最外层的查询标记为子查询
subquery select/where列表中包含子查询
derived  在from表中包含子查询标记为derived衍生表mysql会递归执行子查询把结果放临时表
union 若第二个select出现union 标记为union 若union包含在from子查询中外层select标记为derived
union result 从union表获取结果
# table 表 值从最好到最坏
system>const>eq_ref>ref>range>index>all
system 表只有一行记录这是const类型平时不会出现
const 通过索引一次找到 const 常量查询
eq_ref 唯一性索引扫描 常见主键或唯一索引扫描表中只有一条与匹配
ref 非唯一性索引扫描 返回匹配莫个单独值的所有行，本质索引访问
range 只检索给定范围的行 使用一个索引选择行。key列显示哪个索引这中扫描比全表扫描的好（where,in, between里面）
index 读取全表 但是index从索引中读取
all 全表扫描 扫描硬盘，
#possible_keys 索引是否有效显示可能用到的索引但不一定实际使用
#key 实际用到哪个索引 如果为null 没使用索引 若使用覆盖索引 则索引仅出现在key列表中
# key_len  表示索引中使用的字节数可通过该列计算查询使用的索引长度，在不损失精准情况下长度越短越好 key_len显示值为索引字段最大可能长度并非实际使用长度key_len是跟据表定义计算而得不是通过表内检索出
# ref 显示索引那一列被使用，如果可能是一个常数。哪些列或常量被用于索引上的值
#rows 跟据表统计信息及索引选用情况 大致估算找到所需记录需要读取的行数
**#extra 包含不适合在其他列显示但十分重要的额外信息
***using filesort 外部索引排序不是按表内索引读取mysql无法使用索引完成的排序操作为文件排序需要优化
***using temporary 使用临时表mysqk在对查询使用临时表 常见order by group by
***using index select使用了覆盖索引 
using where 使用where过滤
using join buffer 使用连接缓存，可以提高缓存
impossible where where值为false 
select tables optimized away 
distinct 优化distinct
##case
